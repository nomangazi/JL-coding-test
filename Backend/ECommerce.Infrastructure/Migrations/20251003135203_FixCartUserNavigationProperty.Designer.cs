// <auto-generated />
using System;
using ECommerce.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECommerce.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251003135203_FixCartUserNavigationProperty")]
    partial class FixCartUserNavigationProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Core.Entities.AppliedCoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<int>("CouponId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAutoApplied")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("CartId", "CouponId")
                        .IsUnique();

                    b.ToTable("AppliedCoupons");
                });

            modelBuilder.Entity("ECommerce.Core.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ECommerce.Core.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ECommerce.Core.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicableProductIdsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentTotalUses")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DiscountType")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAutoApplied")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaxDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MaxTotalUses")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxUsesPerUser")
                        .HasColumnType("integer");

                    b.Property<int?>("MinimumCartItems")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MinimumTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicableProductIdsJson = "",
                            Code = "WELCOME50",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 337, DateTimeKind.Utc).AddTicks(3648),
                            CurrentTotalUses = 0,
                            Description = "Welcome bonus - $50 off your first order over $200",
                            DiscountType = 1,
                            DiscountValue = 50m,
                            ExpiryDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsAutoApplied = false,
                            MaxUsesPerUser = 1,
                            MinimumTotalPrice = 200m,
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 337, DateTimeKind.Utc).AddTicks(3650)
                        },
                        new
                        {
                            Id = 2,
                            ApplicableProductIdsJson = "",
                            Code = "AUTO15",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 337, DateTimeKind.Utc).AddTicks(6279),
                            CurrentTotalUses = 0,
                            Description = "Automatic 15% off on orders over $100",
                            DiscountType = 2,
                            DiscountValue = 15m,
                            ExpiryDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsAutoApplied = true,
                            MaxDiscountAmount = 75m,
                            MinimumTotalPrice = 100m,
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 337, DateTimeKind.Utc).AddTicks(6280)
                        },
                        new
                        {
                            Id = 3,
                            ApplicableProductIdsJson = "[1,2,3,6,7,8]",
                            Code = "TECH25",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 337, DateTimeKind.Utc).AddTicks(6427),
                            CurrentTotalUses = 0,
                            Description = "25% off on all electronics - limited time!",
                            DiscountType = 2,
                            DiscountValue = 25m,
                            ExpiryDate = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsAutoApplied = false,
                            MaxDiscountAmount = 250m,
                            MaxTotalUses = 500,
                            MaxUsesPerUser = 2,
                            MinimumTotalPrice = 50m,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 337, DateTimeKind.Utc).AddTicks(6428)
                        },
                        new
                        {
                            Id = 4,
                            ApplicableProductIdsJson = "",
                            Code = "FREESHIP",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 337, DateTimeKind.Utc).AddTicks(6432),
                            CurrentTotalUses = 0,
                            Description = "Free shipping - $15 off on orders over $75",
                            DiscountType = 1,
                            DiscountValue = 15m,
                            ExpiryDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsAutoApplied = false,
                            MaxUsesPerUser = 5,
                            MinimumTotalPrice = 75m,
                            StartDate = new DateTime(2024, 9, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 337, DateTimeKind.Utc).AddTicks(6432)
                        },
                        new
                        {
                            Id = 5,
                            ApplicableProductIdsJson = "",
                            Code = "BULK30",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 337, DateTimeKind.Utc).AddTicks(6436),
                            CurrentTotalUses = 0,
                            Description = "30% off when you buy 3 or more items",
                            DiscountType = 2,
                            DiscountValue = 30m,
                            ExpiryDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsAutoApplied = false,
                            MaxDiscountAmount = 300m,
                            MaxTotalUses = 200,
                            MaxUsesPerUser = 1,
                            MinimumCartItems = 3,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 337, DateTimeKind.Utc).AddTicks(6436)
                        });
                });

            modelBuilder.Entity("ECommerce.Core.Entities.CouponUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CouponId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CouponId", "UserId");

                    b.ToTable("CouponUsages");
                });

            modelBuilder.Entity("ECommerce.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceOffice")
                        .HasColumnType("numeric");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Electronics",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(7688),
                            Description = "High-performance laptop for professionals",
                            ImageUrl = "",
                            IsActive = true,
                            Name = "Laptop",
                            Price = 1000m,
                            PriceOffice = 0m,
                            Stock = 15,
                            UpdatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(7860)
                        },
                        new
                        {
                            Id = 2,
                            Category = "Electronics",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(7984),
                            Description = "Ergonomic wireless mouse with long battery life",
                            ImageUrl = "",
                            IsActive = true,
                            Name = "Wireless Mouse",
                            Price = 25m,
                            PriceOffice = 0m,
                            Stock = 50,
                            UpdatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(7985)
                        },
                        new
                        {
                            Id = 3,
                            Category = "Electronics",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(7987),
                            Description = "RGB mechanical keyboard with tactile switches",
                            ImageUrl = "",
                            IsActive = true,
                            Name = "Mechanical Keyboard",
                            Price = 75m,
                            PriceOffice = 0m,
                            Stock = 25,
                            UpdatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(7987)
                        },
                        new
                        {
                            Id = 4,
                            Category = "Accessories",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(7989),
                            Description = "Fast charging USB-C cable 6 feet long",
                            ImageUrl = "",
                            IsActive = true,
                            Name = "USB-C Cable",
                            Price = 15m,
                            PriceOffice = 0m,
                            Stock = 100,
                            UpdatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(7989)
                        },
                        new
                        {
                            Id = 5,
                            Category = "Accessories",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(7991),
                            Description = "Adjustable aluminum laptop stand for better ergonomics",
                            ImageUrl = "",
                            IsActive = true,
                            Name = "Laptop Stand",
                            Price = 45m,
                            PriceOffice = 0m,
                            Stock = 30,
                            UpdatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(7992)
                        },
                        new
                        {
                            Id = 6,
                            Category = "Electronics",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(8007),
                            Description = "27-inch 4K gaming monitor with 144Hz refresh rate",
                            ImageUrl = "",
                            IsActive = true,
                            Name = "Gaming Monitor",
                            Price = 350m,
                            PriceOffice = 0m,
                            Stock = 12,
                            UpdatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(8007)
                        },
                        new
                        {
                            Id = 7,
                            Category = "Electronics",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(8009),
                            Description = "Latest flagship smartphone with 5G connectivity",
                            ImageUrl = "",
                            IsActive = true,
                            Name = "Smartphone",
                            Price = 800m,
                            PriceOffice = 0m,
                            Stock = 20,
                            UpdatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(8009)
                        },
                        new
                        {
                            Id = 8,
                            Category = "Electronics",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(8011),
                            Description = "Premium noise-cancelling wireless headphones",
                            ImageUrl = "",
                            IsActive = true,
                            Name = "Wireless Headphones",
                            Price = 150m,
                            PriceOffice = 0m,
                            Stock = 35,
                            UpdatedAt = new DateTime(2025, 10, 3, 13, 52, 3, 336, DateTimeKind.Utc).AddTicks(8011)
                        });
                });

            modelBuilder.Entity("ECommerce.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ECommerce.Core.Entities.AppliedCoupon", b =>
                {
                    b.HasOne("ECommerce.Core.Entities.Cart", "Cart")
                        .WithMany("AppliedCoupons")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Core.Entities.Coupon", "Coupon")
                        .WithMany("AppliedCoupons")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ECommerce.Core.Entities.Cart", b =>
                {
                    b.HasOne("ECommerce.Core.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerce.Core.Entities.CartItem", b =>
                {
                    b.HasOne("ECommerce.Core.Entities.Cart", null)
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Core.Entities.CouponUsage", b =>
                {
                    b.HasOne("ECommerce.Core.Entities.Coupon", "Coupon")
                        .WithMany("CouponUsages")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Core.Entities.User", "User")
                        .WithMany("CouponUsages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerce.Core.Entities.Cart", b =>
                {
                    b.Navigation("AppliedCoupons");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("ECommerce.Core.Entities.Coupon", b =>
                {
                    b.Navigation("AppliedCoupons");

                    b.Navigation("CouponUsages");
                });

            modelBuilder.Entity("ECommerce.Core.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("CouponUsages");
                });
#pragma warning restore 612, 618
        }
    }
}
